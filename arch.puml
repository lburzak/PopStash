@startuml ApplicationDiagram
'https://plantuml.com/class-diagram

skinparam linetype polyline
skinparam linetype ortho

package domain.model {
    class Resource {
        +url: String
        +tags: List<String>
        +dateSaved: DateTime
    }

    class Directory {
        +parent: Directory
    }

    class ArchivedResource extends Resource {
        +dateArchived: DateTime
        +directory: Directory
    }

    class TrashedResource extends Resource {
        +dateTrashed: DateTime
    }

    class Selector {
        TaggedWith,
        OlderThan,
        NewerThan,
        FromSite
    }

    class QueueDefinition {
        +filters: Set<Selector>
        +ordering: LinkedHashSet<Selector>
        +filteredSites: Set<String>
    }

    class Queue {
        +definition: QueueDefinition
        +currentResource: Resource
        +resourceProgressPercent: Float
        +nextResources: List<Resource>
        +pinnedResources: <Resource>
    }

    class ResourceMetadata {
        +title: String
        +description: String
        +site: String
        +author: String?
        +thumbnailUrl: String?
        +estimatedConsumptionSeconds: Long?
    }

    class ParsedResource {
        +metadata: ResourceMetadata
    }

    class HtmlResource extends ParsedResource {
        +htmlContent: String
    }

    class YouTubeResource extends ParsedResource {
        +videoId: String
    }

    ParsedResource ---> ResourceMetadata
    Queue ---left-> QueueDefinition
    Queue ---> Resource
    QueueDefinition ---> Selector
    Directory ---> Directory
    ArchivedResource ---> Directory
}

package domain.repository {
    interface ResourceRepository {
        +insertOne(resource: Resource)
    }

    ResourceRepository ---> Resource
}

package domain.service {
    top to bottom direction
    
    class StashService {
        +saveResource(url: String)
        +listResources(): List<Resource>
    }

    class FeedService {
        +defineFeed(url: String, name: String?)
        +fetchResources(feed: Feed)
    }

    class QueueService {
        +createQueue(queueDefinition: QueueDefinitionBuilder)
        +updateQueue(queueDefinition: QueueDefinitionBuilder)
        +findQueue(queueId: Long): Queue
        +pinResource(queue: Queue, resource: Resource)
    }

    class ArchiveService {
        +archiveResource(resource: Resource)
        +unarchiveResource(resource: Resource)
        +listArchivedResources(): List<Resource>
    }

    class TrashService {
        +trashResource(resource: Resource)
        +listTrashedResources(): List<TrashedResource>
        +untrashResource(resource: Resource)
        +removeResource(resource: TrashedResource)
        +emptyTrash()
    }

    QueueService --down-> Queue
    QueueService --down-> QueueDefinition
    QueueService --down-> Resource
    StashService --down-> Resource
    ArchiveService --down-> Resource
    TrashService --down-> Resource
}

package domain.service.parser {
    class ParserService {
        +parse(url: String): ParsedResource
    }

    interface ParserLookup {
        +forSite(url: String): ResourceParser
        +forExtension(extension: String): ResourceParser
        +forContentType(contentType: ContentType): ResourceParser
    }

    interface ResourceParser {
        +parse(url: String): ParsedResource
    }

    interface ParserCache {
        +contains(url: String): Boolean
        +get(url: String): ParsedResource
        +put(parsedResource: ParsedResource)
    }

    interface MetadataCache {
        +contains(url: String): Boolean
        +get(url: String): ParsedResource
        +put(parsedResource: ParsedResource)
    }

    enum ContentType {
        ARTICLE
    }

    ParserLookup --down-> ContentType
    ParserLookup --down-> ResourceParser
    ParserService --down-> ParsedResource
    ParserService --down-> ParserLookup
    ParserService --down-> ContentType
    ParserService --down-> ParserCache
    ParserService --down-> ResourceParser
    ParserService --down-> MetadataCache
}

package usecase {
    class PreviewResource {
        +currentResource: Flow<ParsedResource>
        +execute()
    }

    class SaveResource {
        +execute(url: String): DeferredJob
    }

    class ListStashedUrls {
        +execute(): Flow<List<String>>
    }

    class IdentifyResource {
        +execute(resourceId: Long): Flow<ResourceMetadata>
    }

    PreviewResource --down-> ParsedResource
    PreviewResource --down-> ResourceRepository
    PreviewResource --down-> ParserService
    IdentifyResource --down-> ResourceMetadata
    IdentifyResource --down-> ResourceRepository
    IdentifyResource --down-> ParserService
    SaveResource --down-> ResourceRepository
    ListStashedUrls --down-> ResourceRepository
}

package presentation {
    package presentation.preview {
        class PreviewContainerViewModel {
            previewMode: Flow<PreviewMode>
            title: Flow<String>
            author: Flow<String>
            site: Flow<String>
            content: Flow<String>
        }

        enum PreviewMode {
            YOUTUBE,
            ARTICLE,
        }

        PreviewContainerViewModel --down-> PreviewResource
        PreviewContainerViewModel --down-> PreviewMode
    }

    package presentation.stash {
        class StashViewModel {
            +stashedResourcesIds: Flow<List<Int>>
            +saveResource(url: String): DeferredJob
        }

        StashViewModel --down-> ListStashedUrls
        StashViewModel --down-> SaveResource
        StashViewModel --down-> PreviewResource
    }

    package presentation.resource {
        class ResourceViewModel {
            +title: Flow<String>
            +description: Flow<String>
            +author: Flow<String>
            +site: Flow<String>
            +thumbnailUrl: Flow<String>
            +estimatedConsumptionSeconds: Flow<Long>
        }

        ResourceViewModel --down-> IdentifyResource
    }
}

package ui {
    package ui.stash {
        class StashFragment
        class StashAdapter
        StashAdapter --down-> StashViewModel
        StashFragment --down-> StashViewModel
        StashFragment --down-> ResourceViewHolder
    }
    
    package ui.preview {        
        class PreviewContainerFragment
        PreviewContainerFragment --down-> PreviewContainerViewModel
        PreviewContainerFragment --down-> PreviewMode
    }

    package ui.resource {
        class ResourceViewHolder
        ResourceViewHolder --down-> ResourceViewModel
    }
}

package parser {
    class ArticleParser {
        parse(url: String): HtmlResource
    }

    class YouTubeParser {
        parse(url: String): YouTubeResource
    }

    YouTubeParser --up-|> ResourceParser
    ArticleParser --up-|> ResourceParser
}

package data {
    class LocalResourceRepository {
        +insertOne(resource: Resource)
    }

    LocalResourceRepository -|> ResourceRepository
}
@enduml